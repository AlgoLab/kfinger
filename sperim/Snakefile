from collections import namedtuple

def dict2obj(d):
    return namedtuple('Struct', d)(**d)

MIN_COVERAGE = 0.8

INPUTs = [
    "sampled_read-10k-first100",    # Test
#    "sorted.chr21_32M_34M",         # Hi-Fi
#    "chr21_32000000-34000000_2kread_e0.2_f1200_s0.2_DeepSimu_pass-cleaned",  # DeepSimulator low-error before error
#    "chr21_32000000-34000000_2kread_e0.2_f1200_s0.2_DeepSimu_sampled_read",  # DeepSimulator low-error
#    "chr21_32000000-34000000_10kread_DeepSimu_pass-cleaned",  # DeepSimulator before error
#    "chr21_32000000-34000000_10kread_DeepSimu_sampled_read",  # DeepSimulator with error
]
FACTORIZATIONs = ["CFL_ICFL_COMB"]
Ts = [30]
Ss = [300]

INPUT_METADATA = {
    "sampled_read-10k-first100": {
        'type': 'with-errors',
    },
    "sorted.chr21_32M_34M": {
        'type': 'with-errors',
    },
    "chr21_32000000-34000000_2kread_e0.2_f1200_s0.2_DeepSimu_pass-cleaned": {
        'type': 'error-free',
    },
    "chr21_32000000-34000000_2kread_e0.2_f1200_s0.2_DeepSimu_sampled_read": {
        'type': 'with-errors',
    },
    "chr21_32000000-34000000_10kread_DeepSimu_pass-cleaned": {
        'type': 'error-free',
    },
    "chr21_32000000-34000000_10kread_DeepSimu_sampled_read": {
        'type': 'with-errors',
    },
}

# Find starting overlaps
FSO = {
    'error-free': {
        'k': 7,            # k-fingers size
        'mintl': 40,       # Minimum total length for retaining a k-finger
        'minukf': 6,       # Minimum number of common unique kfingers between two reads to be considered candidate overlapping reads
        'minrl': 0,        # Minimum length for retaining an input read
        'maxrl': 0,        # Maximum length for retaining an input read (0, if any length must be retained)
        'mincov': 0.0,     # Min coverage
        'extspovl': 0,     # 1: the suffix-prefix overlaps are produced in output / 0: the matchings are produced in output
        'downk': 3,        # Downstream k
        'mindownl': 10,    # Min downstream length
        'gapltol': 0       # Gap length tolerance
    },
    'with-errors': {
        'k': 7,
        'mintl': 40,
        'minukf': 6,
        'minrl': 0,
        'maxrl': 0,
        'mincov': 0.0,
        'extspovl': 0,
        'downk': 2,
        'mindownl': 20,
        'gapltol': 15
    }
}

# Check refactorization
CR = {
    'error-free': {
        'fact': 'CFL_ICFL_COMB-30',  # Factorization type (now either: CFL_ICFL-30, CFL_ICFL_COMB-30)
        'k': 5,            # k-fingers size
        'mintl': 10,       # Minimum total length for retaining a k-finger
        'mincov': 0.0,     # Min coverage
        'extspovl': 0,     # 1: the suffix-prefix overlaps are produced in output / 0: the matchings are produced in output
        'downk': 3,        # Downstream k
        'mindownl': 10,    # Min downstream length
        'gapltol': 0       # Gap length tolerance
    },
    'with-errors': {
        'fact': 'CFL_ICFL_COMB-30',
        'k': 5,
        'mintl': 10,
        'mincov': 0.0,
        'extspovl': 0,
        'downk': 2,
        'mindownl': 20,
        'gapltol': 15
    }
}


# Check overlaps
CO_LIMIT_ERRORs = [3]


rule all:
    input:
        expand(
            "output/{fname}/fact_{fact}-{T}_s_{S}/kfinger/full-overlaps.paf",
            fname=INPUTs, fact=FACTORIZATIONs, T=Ts, S=Ss,
        ),
        expand(
            "output/{fname}/minimap2/report-check-minimap-overlaps-{limit_error}.txt",
            fname=INPUTs,
            limit_error=CO_LIMIT_ERRORs,
        ),
        expand(
            "output/{fname}/fact_{fact}-{T}_s_{S}/kfinger/report-check-overlaps-{type_co}-{limit_error}.txt",
            fname=INPUTs, fact=FACTORIZATIONs, T=Ts, S=Ss,
            limit_error=CO_LIMIT_ERRORs,
            type_co=['full', 'outmatch'],
        ),

rule download_inputs:
    output:
        "input/input.tar.bz2",
    params:
        gdrive_id="1OCOaIlJIPWRt0SH6lD2TgNCU5yWQbdvD"
    shell:
        "gdown -O {output} --id {params.gdrive_id}"

rule decompress_inputs:
    input:
        "input/input.tar.bz2",
    output:
        "input/sorted.chr21_32M_34M.fa",
        "input/chr21_32000000-34000000_2kread_e0.2_f1200_s0.2_DeepSimu_pass-cleaned.fa",
        "input/chr21_32000000-34000000_2kread_e0.2_f1200_s0.2_DeepSimu_sampled_read.fa",
        "input/chr21_32000000-34000000_10kread_DeepSimu_pass-cleaned.fa",
        "input/chr21_32000000-34000000_10kread_DeepSimu_sampled_read.fa",
    params:
        prefix=lambda wildcards, output: os.path.dirname(output[0]),
    shell:
        "tar xvjf {input} -C {params.prefix}"

rule fingerprint:
    input:
        "input/{fname}.fa"
    params:
        prefix="output/{fname}/fact_{fact}-{T}_s_{S}"
    output:
        "output/{fname}/fact_{fact}-{T}_s_{S}/fingerprint_{fact}-{T}_s_{S}.txt",
        "output/{fname}/fact_{fact}-{T}_s_{S}/fact_fingerprint_{fact}-{T}_s_{S}.txt"
    log:
        time="output/{fname}/fact_{fact}-{T}_s_{S}/logs-fingerprint-long_reads_{fact}-{T}_s_{S}.time",
        out="output/{fname}/fact_{fact}-{T}_s_{S}/logs-fingerprint-long_reads_{fact}-{T}_s_{S}.out",
        err="output/{fname}/fact_{fact}-{T}_s_{S}/logs-fingerprint-long_reads_{fact}-{T}_s_{S}.err"
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ../fingerprint.py --type long_reads --path {params.prefix}/ --fasta {input} --type_factorization {wildcards.fact}-{wildcards.T} --s_fact {wildcards.S} -n {threads} > {log.out} 2> {log.err}"

rule find_starting_overlap:
    input:
        fingerprint="output/{fname}/fact_{suffix}/fingerprint_{suffix}.txt",
        fact_fingerprint="output/{fname}/fact_{suffix}/fact_fingerprint_{suffix}.txt",
    output:
        "output/{fname}/fact_{suffix}/kfinger/raw-matchings.txt",
    params:
        prefix=lambda wildcards, output: os.path.dirname(output[0]),
        p=lambda wildcards: dict2obj(FSO[INPUT_METADATA[wildcards.fname]['type']]),
    log:
        time="output/{fname}/fact_{suffix}/kfinger/logs-find-starting-overlap.time",
        out="output/{fname}/fact_{suffix}/kfinger/logs-find-starting-overlap.out",
        err="output/{fname}/fact_{suffix}/kfinger/logs-find-starting-overlap.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ../find-starting-overlap.py {input.fingerprint} {input.fact_fingerprint} {params.p.k} {params.p.mintl} {params.p.minukf} {params.p.minrl} {params.p.maxrl} {params.p.mincov} {params.p.extspovl} {params.p.downk} {params.p.mindownl} {params.p.gapltol} {params.prefix}/ > {log.out} 2> {log.err}"

rule check_refactorization:
    input:
        raw_overlap="output/{fname}/fact_{suffix}/kfinger/raw-matchings.txt",
        fingerprint="output/{fname}/fact_{suffix}/fingerprint_{suffix}.txt",
        fact_fingerprint="output/{fname}/fact_{suffix}/fact_fingerprint_{suffix}.txt",
    output:
        "output/{fname}/fact_{suffix}/kfinger/refact-matchings.txt",
    params:
        prefix=lambda wildcards, output: os.path.dirname(output[0]),
        p=lambda wildcards: dict2obj(CR[INPUT_METADATA[wildcards.fname]['type']]),
    log:
        time="output/{fname}/fact_{suffix}/kfinger/logs-check-refactorization.time",
        out="output/{fname}/fact_{suffix}/kfinger/logs-check-refactorization.out",
        err="output/{fname}/fact_{suffix}/kfinger/logs-check-refactorization.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ../check-refactorization.py {input.raw_overlap} {input.fingerprint} {input.fact_fingerprint} {params.p.fact} {params.p.k} {params.p.mintl} {params.p.mincov} {params.p.extspovl} {params.p.downk} {params.p.mindownl} {params.p.gapltol} {params.prefix}/ > {log.out} 2> {log.err}"

rule process_kfinger_output:
    input:
        refact_matchings="output/{fname}/fact_{suffix}/kfinger/refact-matchings.txt",
    output:
        "output/{fname}/fact_{suffix}/kfinger/output-matchings.txt",
    params:
        prefix=lambda wildcards, output: os.path.dirname(output[0]),
        check_consistent_overlaps=0,
        strict_consistency=0,   # unused if check_consistent_overlaps is 0
    log:
        time="output/{fname}/fact_{suffix}/kfinger/logs-process-kfinger-output.time",
        out="output/{fname}/fact_{suffix}/kfinger/logs-process-kfinger-output.out",
        err="output/{fname}/fact_{suffix}/kfinger/logs-process-kfinger-output.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ../process-kfinger-output.py {input.refact_matchings} {params.check_consistent_overlaps} {params.strict_consistency} {params.prefix}/ > {log.out} 2> {log.err}"

rule get_overlaps:
    input:
        output_matchings="output/{fname}/fact_{suffix}/kfinger/output-matchings.txt",
    output:
        "output/{fname}/fact_{suffix}/kfinger/full-overlaps.txt",
    params:
        prefix=lambda wildcards, output: os.path.dirname(output[0]),
        min_coverage=MIN_COVERAGE,
    log:
        time="output/{fname}/fact_{suffix}/kfinger/logs-get-overlaps.time",
        out="output/{fname}/fact_{suffix}/kfinger/logs-get-overlaps.out",
        err="output/{fname}/fact_{suffix}/kfinger/logs-get-overlaps.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ../get-overlaps.py {input.output_matchings} {params.min_coverage} {params.prefix}/ > {log.out} 2> {log.err}"

rule convert_to_paf_format:
    input:
        full_overlaps="output/{fname}/fact_{suffix}/kfinger/full-overlaps.txt",
    output:
        "output/{fname}/fact_{suffix}/kfinger/full-overlaps.paf",
    log:
        time="output/{fname}/fact_{suffix}/kfinger/logs-convert-to-paf-format.time",
        out="output/{fname}/fact_{suffix}/kfinger/logs-convert-to-paf-format.out",
        err="output/{fname}/fact_{suffix}/kfinger/logs-convert-to-paf-format.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ../convert-to-paf-format.py {input.full_overlaps} {output} > {log.out} 2> {log.err}"


rule check_overlaps_full:
    input:
        overlaps="output/{fname}/fact_{suffix}/kfinger/full-overlaps.txt",
        fasta="input/{fname}.fa",
    output:
        "output/{fname}/fact_{suffix}/kfinger/report-check-overlaps-full-{limit_error}.txt",
    log:
        time="output/{fname}/fact_{suffix}/kfinger/logs-check-overlaps-full-{limit_error}.time",
        err="output/{fname}/fact_{suffix}/kfinger/logs-check-overlaps-full-{limit_error}.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ./check-overlaps.py {input.overlaps} {input.fasta} {wildcards.limit_error} > {output} 2> {log.err}"

rule check_overlaps_output_matchings:
    input:
        overlaps="output/{fname}/fact_{suffix}/kfinger/output-matchings.txt",
        fasta="input/{fname}.fa",
    output:
        "output/{fname}/fact_{suffix}/kfinger/report-check-overlaps-outmatch-{limit_error}.txt",
    log:
        time="output/{fname}/fact_{suffix}/kfinger/logs-check-overlaps-outmatch-{limit_error}.time",
        err="output/{fname}/fact_{suffix}/kfinger/logs-check-overlaps-outmatch-{limit_error}.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ./check-overlaps.py {input.overlaps} {input.fasta} {wildcards.limit_error} > {output} 2> {log.err}"

rule run_minimap2:
    input:
        fasta="input/{fname}.fa",
    output:
        "output/{fname}/minimap2/ovlp.paf",
    log:
        time="output/{fname}/minimap2/logs-minimap2.time",
        err="output/{fname}/minimap2/logs-minimap2.err",
    threads: 4
    shell:
        "/usr/bin/time -v -o {log.time} minimap2 -x ava-pb -t {threads} {input.fasta} {input.fasta} > {output} 2> {log.err}"

rule get_minimap_overlaps:
    input:
        "output/{fname}/minimap2/ovlp.paf",
    output:
        "output/{fname}/minimap2/full-minimap-overlaps.paf",
    log:
        time="output/{fname}/minimap2/logs-get-minimap-overlaps.time",
        out="output/{fname}/minimap2/logs-get-minimap-overlaps.out",
        err="output/{fname}/minimap2/logs-get-minimap-overlaps.err",
    params:
        prefix=lambda wildcards, output: os.path.dirname(output[0]),
        min_coverage=MIN_COVERAGE,
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ./get-minimap-overlaps.py {input} {params.min_coverage} {params.prefix}/ > {log.out} 2> {log.err}"

rule check_minimap_overlaps:
    input:
        overlaps="output/{fname}/minimap2/full-minimap-overlaps.paf",
        fasta="input/{fname}.fa",
    output:
        "output/{fname}/minimap2/report-check-minimap-overlaps-{limit_error}.txt",
    log:
        time="output/{fname}/minimap2/logs-check-minimap-overlaps-{limit_error}.time",
        err="output/{fname}/minimap2/logs-check-minimap-overlaps-{limit_error}.err",
    conda:
        "../environment.yml"
    shell:
        "/usr/bin/time -v -o {log.time} python ./check-minimap-overlaps.py {input.overlaps} {input.fasta} {wildcards.limit_error} > {output} 2> {log.err}"
